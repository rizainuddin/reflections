What happens when you initialize a repository? Why do you need to do it?

	When git init is executed in the reflection repository .git file will be created as an empty repository. This needs to be done to enable this repository to use git and start tracking commits. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area acts like a holding area before it goes live into the working directory. This holding area can enable me to retract/remove the file in case I have some errors I just remembered to change, re-organizing the logical commits again before commiting it to working directory. 

How can you use the staging area to make sure you have one commit per logical
change?

	I use 'git diff' between working and staging area to check how many files where modified before committing. Before commit I can check whether if the changes I made to the file is correct with the version on the repository. I will use 'git diff --staged'.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?